import time
from PIL import Image
from io import BytesIO
start = time.time()

import base64
from PIL import Image
from io import BytesIO

import argparse
import cv2
import itertools
import os
from sys import argv
import numpy as np
np.set_printoptions(precision=2)

import openface
import cv2
import database

fileDir = os.path.dirname(os.path.realpath(__file__))
modelDir = os.path.join(fileDir, '../../openface', 'models')
dlibModelDir = os.path.join(modelDir, 'dlib')
openfaceModelDir = os.path.join(modelDir, 'openface')

align = openface.AlignDlib(os.path.join(dlibModelDir, "shape_predictor_68_face_landmarks.dat"))
net = openface.TorchNeuralNet(os.path.join(openfaceModelDir, 'nn4.small2.v1.t7'), 96)

face_visible = -1

def getRep(img):
    #if args.verbose:
    #    print("Processing {}.".format(imgPath))
    #print "1*************************************"
    bgrImg = np.array(img)
    #print "2*******************************************"
   
     
    global face_visible
    
    rgbImg = cv2.cvtColor(bgrImg, cv2.COLOR_BGR2RGB)

    face_visible=1

    bb = align.getLargestFaceBoundingBox(rgbImg)
    if bb is None:
        face_visible=0
        return 0
    
    alignedFace = align.align(96, rgbImg, bb,
                              landmarkIndices=openface.AlignDlib.OUTER_EYES_AND_NOSE)
    if alignedFace is None:
        face_visible=0
	return 0
    
    rep = net.forward(alignedFace)
    
    return rep

def comparethem(image2path,filename1,filename2):
    try:
    	img1=Image.open(image2path)
    except:
        matching = "no_profile_image"
	print matching
	return matching
    #print image2path
    #img2=Image.open('/edx/app/edxapp/venvs/proctor/lib/python2.7/site-packages/car.jpg')
    #img2.show()	
    #img1=Image.open('/edx/app/edxapp/venvs/proctor/lib/python2.7/site-packages/1.jpg')
    with open('/edx/app/edxapp/venvs/proctor/lib/python2.7/site-packages/compare_image/json_data1.txt', 'r') as json_file:
               image_string = json_file.read().replace('\n', '')

    frame= img1    
    frame= np.array(frame)
    cv2.imwrite(filename1 + ".jpg",frame)
 


    image_string = base64.b64decode(image_string[22:])
    with open(filename2, 'wb') as file_name:
                file_name.write(image_string)

    img2 = Image.open(BytesIO(image_string))

    
    
    d1 = getRep(img2)
    if face_visible == 0:
	matching="no_face_webcam" 
	print matching
	return matching
    d2 = getRep(img1)
    if face_visible == 0:
	matching="no_face_profile"
	print matching
    	return matching

    d = d1-d2
    
    k=np.dot(d, d)
    
    print k
    if k>=0.8:
	matching="not_matched"
    else:
	matching="matched"
    print matching

    return matching

matching=comparethem(argv[1],argv[2],argv[3])

database.update_match(argv[4],argv[5],"img_match",matching)

